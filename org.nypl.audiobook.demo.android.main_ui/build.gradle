apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

/*
 * Copy some properties from the local.properties file into a properties file used to populate
 * various fields in the application.
 */

task generatePropertiesResources {
  def local_props_file = new File(project.rootProject.projectDir, "local.properties")
  def local_props = new Properties()
  local_props.load(new FileInputStream(local_props_file))

  def borrow_uri = local_props.get("feed.borrow_uri")

  if (borrow_uri == null) {
    throw new IllegalArgumentException("Please specify feed.borrow_uri in local.properties")
  }

  def directory = new File(project.projectDir, "src/main/assets").absoluteFile
  directory.mkdirs()
  def file = new File(directory, "app.properties")
  file.createNewFile()

  def properties = new Properties()
  properties.setProperty("feed.borrow_uri", borrow_uri)
  properties.store(new FileOutputStream(file), "Automatically generated - DO NOT EDIT")
}


preBuild.dependsOn generatePropertiesResources

android {
  compileSdkVersion 27
  buildToolsVersion "27.0.3"

  compileOptions {
    sourceCompatibility 1.8
    targetCompatibility 1.8
  }

  defaultConfig {
    multiDexEnabled true
  }
}

dependencies {
  implementation 'com.android.support:support-v4:27.1.1'
  implementation 'com.android.support:recyclerview-v7:27.1.1'
  annotationProcessor "com.google.auto.value:auto-value:1.3"

  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  implementation "com.android.support:recyclerview-v7:${dependency_recyclerview_version}"

  implementation "org.nypl.audiobook:org.nypl.audiobook.android.manifest.nypl:${nypl_audiobook_api_version}"
  implementation "org.nypl.audiobook:org.nypl.audiobook.android.api:${nypl_audiobook_api_version}"
  implementation "org.nypl.audiobook:org.nypl.audiobook.android.open_access:${nypl_audiobook_api_version}"
  implementation "org.nypl.audiobook:org.nypl.audiobook.android.views:${nypl_audiobook_api_version}"
  implementation "org.nypl.audiobook:org.nypl.audiobook.android.downloads:${nypl_audiobook_api_version}"

  if (project.hasProperty("org.nypl.audiobook.demo.with_findaway")) {
    if (project.property("org.nypl.audiobook.demo.with_findaway") == "true") {
      implementation "org.nypl.audiobook:org.nypl.audiobook.android.audioengine.core:${nypl_audiobook_audioengine_version}"
    }
  }

  implementation "org.slf4j:slf4j-api:${dependency_slf4j_version}"
  implementation "com.github.stephenc.jcip:jcip-annotations:${dependency_jcip_version}"

  implementation "com.github.tony19:logback-android-core:${dependency_logback_android_version}"
  implementation("com.github.tony19:logback-android-classic:${dependency_logback_android_version}") {
    // https://github.com/tony19/logback-android/issues/73
    exclude group: 'com.google.android', module: 'android'
  }
}

apply plugin: 'kotlin-android-extensions'
